static const Key keys[ = {
MODKEY,   XK_BackSpace, spawn,  {.v = (const char*[]){ "sysact", NULL } } },
MODKEY,   XK_minus, spawn,  SHCMD("wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%-; kill -44 $(pidof dwmblocks)") },
MODKEY|ShiftMask,  XK_minus, spawn,  SHCMD("wpctl set-volume @DEFAULT_AUDIO_SINK@ 15%-; kill -44 $(pidof dwmblocks)") },
MODKEY,   XK_plus, spawn,  SHCMD("wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%+; kill -44 $(pidof dwmblocks)") },
MODKEY|ShiftMask,  XK_plus, spawn,  SHCMD("wpctl set-volume @DEFAULT_AUDIO_SINK@ 15%+; kill -44 $(pidof dwmblocks)") },
MODKEY,   XK_w,  spawn,  {.v = (const char*[]){ BROWSER, NULL } } },
MODKEY|ShiftMask,  XK_w,  spawn,  {.v = (const char*[]){ TERMINAL, "-e", "sudo", "nmtui", NULL } } },
MODKEY,   XK_e,  spawn,  {.v = (const char*[]){ EMAILCLIENT, NULL } } },
MODKEY|ShiftMask,  XK_e,  spawn,  SHCMD(TERMINAL " -e abook -C ~/.config/abook/abookrc --datafile ~/.config/abook/addressbook") },
MODKEY,   XK_r,  spawn,  {.v = (const char*[]){ TERMINAL, "-e", "lfub", NULL } } },
MODKEY|ShiftMask,  XK_r,  spawn,  {.v = (const char*[]){ TERMINAL, "-e", "htop", NULL } } },
MODKEY|ShiftMask,  XK_y,  spawn,  {.v = (const char*[]){ TERMINAL, "-e", "ytfzf", "-t", NULL } } },
MODKEY,   XK_n,  spawn,  {.v = (const char*[]){ TERMINAL, "-e", "nvim", "-c", "WikiIndex", NULL } } },
MODKEY,   XK_c,  spawn,  {.v = (const char*[]){ "clipmenu", NULL } } },

MODKEY|ShiftMask,  XK_m,  spawn,  SHCMD("wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle; kill -44 $(pidof dwmblocks)") },
MODKEY,   XK_F1,  spawn,  SHCMD("zathura /home/anton/Nextcloud/dox/important/tud-indexed-secret.pdf") },
MODKEY,   XK_F2,  spawn,  {.v = (const char*[]){ "tutorialvids", NULL } } },
MODKEY,   XK_F3,  spawn,  {.v = (const char*[]){ "displayselect", NULL } } },
MODKEY,   XK_F4,  spawn,  SHCMD(TERMINAL " -e pulsemixer; kill -44 $(pidof dwmblocks)") },
MODKEY,   XK_F5,  xrdb,  {.v = NULL } },
MODKEY,   XK_F6,  spawn,  {.v = (const char*[]){ "torwrap", NULL } } },
MODKEY,   XK_F7,  spawn,  {.v = (const char*[]){ "dmenuunicode", NULL } } },
MODKEY,   XK_F8,  spawn,  {.v = (const char*[]){ "maimpick", NULL } } },
MODKEY|ShiftMask,  XK_F8,  spawn,  {.v = (const char*[]){ "ss-uni", NULL } } },
MODKEY,   XK_F9,  spawn,  {.v = (const char*[]){ "mounter", NULL } } },
MODKEY,   XK_F10,  spawn,  {.v = (const char*[]){ "unmounter", NULL } } },
MODKEY,   XK_F11,  spawn,  SHCMD("mpv --untimed --no-cache --no-osc --no-input-default-bindings --profile=low-latency --input-conf=/dev/null --title=webcam $(ls /dev/video[0,2,4,6,8] | tail -n 1)") },
MODKEY,   XK_F12,  spawn,  SHCMD("remaps") },

XK_Print, spawn,  SHCMD("maim pic-full-$(date '+%y%m%d-%H%M-%S').png && notify-send 'screenshot taken'") },
MODKEY,   XK_Print, spawn,  {.v = (const char*[]){ "maimpick", NULL } } },
MODKEY,   XK_Print, spawn,  {.v = (const char*[]){ "dmenurecord", NULL } } },
MODKEY|ShiftMask,  XK_Print, spawn,  {.v = (const char*[]){ "dmenurecord", "kill", NULL } } },
MODKEY,   XK_Delete, spawn,  {.v = (const char*[]){ "dmenurecord", "kill", NULL } } },
MODKEY,   XK_Scroll_Lock, spawn,  SHCMD("killall screenkey || screenkey &") },

XF86XK_AudioMute,  spawn,  SHCMD("wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle; kill -44 $(pidof dwmblocks)") },
XF86XK_AudioRaiseVolume, spawn,  SHCMD("wpctl set-volume @DEFAULT_AUDIO_SINK@ 3%+; kill -44 $(pidof dwmblocks)") },
XF86XK_AudioLowerVolume, spawn,  SHCMD("wpctl set-volume @DEFAULT_AUDIO_SINK@ 3%-; kill -44 $(pidof dwmblocks)") },
XF86XK_AudioPrev,  spawn,  {.v = (const char*[]){ "mpc", "prev", NULL } } },
XF86XK_AudioNext,  spawn,  {.v = (const char*[]){ "mpc",  "next", NULL } } },
XF86XK_AudioPause,  spawn,  {.v = (const char*[]){ "mpc", "pause", NULL } } },
XF86XK_AudioPlay,  spawn,  {.v = (const char*[]){ "mpc", "play", NULL } } },
XF86XK_AudioStop,  spawn,  {.v = (const char*[]){ "mpc", "stop", NULL } } },
XF86XK_AudioRewind, spawn,  {.v = (const char*[]){ "mpc", "seek", "-10", NULL } } },
XF86XK_AudioForward, spawn,  {.v = (const char*[]){ "mpc", "seek", "+10", NULL } } },
XF86XK_AudioMedia,  spawn,  {.v = (const char*[]){ TERMINAL, "-e", "ncmpcpp", NULL } } },
XF86XK_AudioMicMute, spawn,  SHCMD("pactl set-source-mute @DEFAULT_SOURCE@ toggle") },
XF86XK_PowerOff,  spawn,  {.v = (const char*[]){ "sysact", NULL } } },
XF86XK_Calculator,  spawn,  {.v = (const char*[]){ TERMINAL, "-e", "bc", "-l", NULL } } },
XF86XK_Sleep,  spawn,  {.v = (const char*[]){ "sudo", "-A", "zzz", NULL } } },
XF86XK_WWW,  spawn,  {.v = (const char*[]){ BROWSER, NULL } } },
XF86XK_DOS,  spawn,  {.v = termcmd } },
XF86XK_ScreenSaver, spawn,  SHCMD("slock & xset dpms force off; mpc pause; pauseallmpv") },
XF86XK_TaskPane,  spawn,  {.v = (const char*[]){ TERMINAL, "-e", "htop", NULL } } },
XF86XK_Mail,  spawn,  SHCMD(TERMINAL " -e neomutt ; pkill -RTMIN+12 dwmblocks") },
XF86XK_MyComputer,  spawn,  {.v = (const char*[]){ TERMINAL, "-e",  "lfub",  "/", NULL } } },
XF86XK_Battery,  spawn,  SHCMD("") }, */
XF86XK_Launch1,  spawn,  {.v = (const char*[]){ "xset", "dpms", "force", "off", NULL } } },
XF86XK_TouchpadToggle, spawn,  SHCMD("(synclient | grep 'TouchpadOff.*1' && synclient TouchpadOff=0) || synclient TouchpadOff=1") },
XF86XK_TouchpadOff, spawn,  {.v = (const char*[]){ "synclient", "TouchpadOff=1", NULL } } },
XF86XK_TouchpadOn,  spawn,  {.v = (const char*[]){ "synclient", "TouchpadOff=0", NULL } } },
XF86XK_MonBrightnessUp, spawn,  {.v = (const char*[]){ "brightnessctl", "set", "+15%", NULL } } },
XF86XK_MonBrightnessDown, spawn,  {.v = (const char*[]){ "brightnessctl", "set", "15%-", NULL } } },
MODKEY,   XK_d,  spawn,          {.v = (const char*[]){ "dmenu_run", NULL } } },
MODKEY,            XK_Return,     spawn,                  {.v = termcmd } },
MODKEY|ControlMask,           XK_p,          riospawnsync,           {.v = dmenucmd } },
MODKEY|ControlMask,           XK_Return,     riospawn,               {.v = termcmd } },
MODKEY,                       XK_s,          rioresize,              {0} },
MODKEY,                       XK_b,          togglebar,              {0} },
MODKEY|ControlMask,           XK_b,          tabmode,                {-1} },
STACKKEYS(MODKEY,                              focus)
STACKKEYS(MODKEY|ShiftMask,                    push)
MODKEY,                       XK_v,          switchcol,              {0} },
MODKEY|ControlMask,           XK_j,          pushdown,               {0} },
MODKEY|ControlMask,           XK_k,          pushup,                 {0} },
MODKEY|ShiftMask,             XK_i,          incnmaster,             {.i = 1 } },
MODKEY|ShiftMask,             XK_d,          incnmaster,             {.i = -1 } },
MODKEY,                       XK_h,          setmfact,               {.f = -0.05} },
MODKEY,                       XK_l,          setmfact,               {.f = 0.05} },
MODKEY|ShiftMask,             XK_h,          setcfact,               {.f = 0.25} },
MODKEY|ShiftMask,             XK_l,          setcfact,               {.f = -0.25} },
MODKEY|ShiftMask,             XK_o,          setcfact,               {0} },
MODKEY|ShiftMask,             XK_j,          movestack,              {.i = 1 } },
MODKEY|ShiftMask,             XK_k,          movestack,              {.i = -1 } },
MODKEY,                       XK_x,          transfer,               {0} },
MODKEY|ShiftMask,             XK_x,          transferall,            {0} },
MODKEY|ControlMask,           XK_d,          distributetags,         {0} },
MODKEY|ShiftMask,             XK_space,      zoom,                   {0} },
MODKEY,                XK_g,          togglegaps,             {0} },
MODKEY|ShiftMask,   XK_g,   incrgaps,   {.i = 5} },    // Increment gaps by 5
MODKEY|ControlMask|ShiftMask, XK_g,   defaultgaps,   {0} },    // Increment gaps by 5
Mod1Mask,                     XK_Tab,        alttabstart,            {0} },
MODKEY|ShiftMask,             XK_Left,       shifttag,               { .i = -1 } }, // note keybinding conflict with focusadjacenttag tagtoleft
MODKEY|ShiftMask,             XK_Right,      shifttag,               { .i = 1 } }, // note keybinding conflict with focusadjacenttag tagtoright
MODKEY|Mod4Mask,              XK_Tab,        shiftviewclients,       { .i = -1 } },
MODKEY|Mod4Mask,              XK_backslash,  shiftviewclients,       { .i = 1 } },
MODKEY,               XK_q,          killclient,             {0} },
MODKEY|ShiftMask,             XK_q,          killunsel,              {0} },
MODKEY|ShiftMask,             XK_q,          quit,                   {0} },
MODKEY|ControlMask|ShiftMask, XK_q,          quit,                   {1} },
MODKEY,                       XK_u,          focusurgent,            {0} },
MODKEY,                       XK_o,          winview,                {0} },
MODKEY,                       XK_t,          setlayout,              {.v = &layouts[0]} },
MODKEY,                       XK_f,          setlayout,              {.v = &layouts[1]} },
MODKEY,                       XK_m,          setlayout,              {.v = &layouts[2]} },
MODKEY|ShiftMask,             XK_c,          setlayout,              {.v = &layouts[3]} },
MODKEY|ShiftMask,             XK_f,   togglefloating,         {0} },
MODKEY|ShiftMask,          XK_Return, togglescratch,               {.v = scratchpadcmd } },
MODKEY,           XK_dead_circumflex,       setscratch,             {.v = scratchpadcmd } },
MODKEY|ShiftMask,          XK_dead_circumflex,       removescratch,          {.v = scratchpadcmd } },
MODKEY|ControlMask,           XK_f,          unfloatvisible,         {0} },
MODKEY|ShiftMask,             XK_t,          unfloatvisible,         {.v = &layouts[0]} },
MODKEY,                       XK_y,          togglefullscreen,       {0} },
MODKEY|ShiftMask,             XK_s,          togglesticky,           {0} },
MODKEY,                       XK_         view,                   {.ui = ~0 } },
MODKEY|ShiftMask,             XK_         tag,                    {.ui = ~0 } },
MODKEY,                       XK_comma,      focusmon,               {.i = -1 } },
MODKEY,                       XK_period,     focusmon,               {.i = 1 } },
MODKEY|ShiftMask,             XK_comma,      tagmon,                 {.i = -1 } },
MODKEY|ShiftMask,             XK_period,     tagmon,                 {.i = 1 } },
MODKEY,                       XK_Left,       viewtoleft,             {0} }, // note keybinding conflict with focusdir
MODKEY,                       XK_Right,      viewtoright,            {0} }, // note keybinding conflict with focusdir
MODKEY|ShiftMask,             XK_Left,       tagtoleft,              {0} }, // note keybinding conflict with shifttag
MODKEY|ShiftMask,             XK_Right,      tagtoright,             {0} }, // note keybinding conflict with shifttag
MODKEY|ControlMask,           XK_Left,       tagandviewtoleft,       {0} }, // note keybinding conflict with placedir
MODKEY|ControlMask,           XK_Right,      tagandviewtoright,      {0} }, // note keybinding conflict with placedir
MODKEY|ShiftMask,             XK_F1,         tagall,                 {.v = "F1"} },
MODKEY|ShiftMask,             XK_F2,         tagall,                 {.v = "F2"} },
MODKEY|ShiftMask,             XK_F3,         tagall,                 {.v = "F3"} },
MODKEY|ShiftMask,             XK_F4,         tagall,                 {.v = "F4"} },
MODKEY|ShiftMask,             XK_F5,         tagall,                 {.v = "F5"} },
MODKEY|ShiftMask,             XK_F6,         tagall,                 {.v = "F6"} },
MODKEY|ShiftMask,             XK_F7,         tagall,                 {.v = "F7"} },
MODKEY|ShiftMask,             XK_F8,         tagall,                 {.v = "F8"} },
MODKEY|ShiftMask,             XK_F9,         tagall,                 {.v = "F9"} },
MODKEY|ControlMask,           XK_F1,         tagall,                 {.v = "1"} },
MODKEY|ControlMask,           XK_F2,         tagall,                 {.v = "2"} },
MODKEY|ControlMask,           XK_F3,         tagall,                 {.v = "3"} },
MODKEY|ControlMask,           XK_F4,         tagall,                 {.v = "4"} },
MODKEY|ControlMask,           XK_F5,         tagall,                 {.v = "5"} },
MODKEY|ControlMask,           XK_F6,         tagall,                 {.v = "6"} },
MODKEY|ControlMask,           XK_F7,         tagall,                 {.v = "7"} },
MODKEY|ControlMask,           XK_F8,         tagall,                 {.v = "8"} },
MODKEY|ControlMask,           XK_F9,         tagall,                 {.v = "9"} },
MODKEY|Mod4Mask|ShiftMask,    XK_comma,      tagallmon,              {.i = 1 } },
MODKEY|Mod4Mask|ShiftMask,    XK_period,     tagallmon,              {.i = -1 } },
MODKEY|Mod4Mask|ControlMask,  XK_comma,      tagswapmon,             {.i = 1 } },
MODKEY|Mod4Mask|ControlMask,  XK_period,     tagswapmon,             {.i = -1 } },
MODKEY,                       XK_n,          togglealttag,           {0} },
MODKEY|ShiftMask,             XK_n,          nametag,                {0} },
MODKEY,                       XK_KP_7,       moveplace,              {.ui = WIN_NW }},   /* XK_KP_Home,  */
MODKEY,                       XK_KP_8,       moveplace,              {.ui = WIN_N  }},   /* XK_KP_Up,    */
MODKEY,                       XK_KP_9,       moveplace,              {.ui = WIN_NE }},   /* XK_KP_Prior, */
MODKEY,                       XK_KP_4,       moveplace,              {.ui = WIN_W  }},   /* XK_KP_Left,  */
MODKEY,                       XK_KP_5,       moveplace,              {.ui = WIN_C  }},   /* XK_KP_Begin, */
MODKEY,                       XK_KP_6,       moveplace,              {.ui = WIN_E  }},   /* XK_KP_Right, */
MODKEY,                       XK_KP_1,       moveplace,              {.ui = WIN_SW }},   /* XK_KP_End,   */
MODKEY,                       XK_KP_2,       moveplace,              {.ui = WIN_S  }},   /* XK_KP_Down,  */
MODKEY,                       XK_KP_3,       moveplace,              {.ui = WIN_SE }},   /* XK_KP_Next,  */
MODKEY|ControlMask,           XK_comma,      cyclelayout,            {.i = -1 } },
MODKEY|ControlMask,           XK_period,     cyclelayout,            {.i = 1 } },
TAGKEYS(                        XK_1,                                  0)
TAGKEYS(                        XK_2,                                  1)
TAGKEYS(                      XK_3,                                  2)
TAGKEYS(                        XK_4,                                  3)
TAGKEYS(                        XK_5,                                  4)
TAGKEYS(                        XK_6,                                  5)
TAGKEYS(                        XK_7,                                  6)
TAGKEYS(                        XK_8,                                  7)
TAGKEYS(                        XK_9,                                  8)
};

